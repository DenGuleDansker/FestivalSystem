@page "/vagtliste"
@using Common.Model
@using Client.Services
@using System.Net.Http.Json;
@using Client.Pages;


<PageTitle>Vagt listen</PageTitle>

<h1>Vagt listen</h1>


<div>
    <input type="text" @bind="@searchKeyword" placeholder="Search by name" />
    <label>Sort Order:</label>
    <select @bind="@sortOrder">
        <option value="ascending">Point Ascending</option>
        <option value="descending">Point Descending</option>
    </select>
    <button @onclick="FilterAndSort">Submit</button>

</div>



<div class="row">
    <div class="col-md-8">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Navn</th>
                    <th>Point</th>
                    <th>Telefonnummer</th>
                    <th>Addresse</th>
                    <th>Email</th>
                    <th>Fødselsdagsdato</th>
                    <th>koordinator: </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var vagt in filteredVagtlist)
                {
                    <tr>
                        <td>@vagt.Navn</td>
                        <td>@vagt.Point</td>
                        <td>@vagt.Start</td>
                        <td>@vagt.Slut</td>
                        <td>@vagt.Beskrivelse</td>
                        <td>@vagt.Kategori</td>
                        <td>@vagt.Antal</td>
                        <td>
                            <a href="@($"/redigervagt?id={vagt.ID}")"> <button class="btn btn-primary">Rediger vagt</button></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    private Vagt vagt = new Vagt(); // Opretter et tomt Booking objekt
    private Vagt[]? vagtlist = new Vagt[0]; // Opretter en tom liste af booking objekter

    [Inject]
    private IVagtService mService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        vagtlist = (await mService.getAll()).ToArray();

    }


    private string searchKeyword = "";
    private string sortOrder = "ascending";

    private IEnumerable<Vagt> filteredVagtlist => string.IsNullOrWhiteSpace(searchKeyword) ? SortPoint(vagtlist) : SortPoint(vagtlist).Where(v => v.Navn.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase));


    private IEnumerable<Vagt> SortPoint(IEnumerable<Vagt> point)
    {
        return sortOrder == "ascending"
            ? point.OrderBy(p => p.Point)
            : point.OrderByDescending(p => p.Point);
    }

    private void ToggleSortOrder()
    {
        sortOrder = sortOrder == "ascending" ? "descending" : "ascending";
    }

    private void FilterAndSort()
    {
        // Opdatering af komponenten er automatisk, da den afhænger af filteredAndSortedPersons
    }

}