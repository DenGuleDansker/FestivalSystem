@page "/redigerbruger"
@using Common.Model;
@using System.Web;
@using Client.Services;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient http;

<div class="row">
<div class="col-sm-4">
<div>
    <p><strong>Koordinator:</strong> @bruger.IsKoordinator</p> <!-- Slettes inden release -->
</div>

<EditForm Model="@aEditContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <h3>Rediger information</h3>
    <hr />
    <ValidationSummary />
    <div class="form-group row">
        <label for="firstName" class="col-sm-3 col-form-label">
            Fornavn
        </label>
        <div class="col-sm-6">
            <InputText id="Fornavn" class="form-control" placeholder="@bruger.Fornavn"
                       @bind-Value="bruger.Fornavn" />
            <ValidationMessage For="@(() => bruger.Fornavn)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Efternavn" class="col-sm-3 col-form-label">
            Efternavn
        </label>
        <div class="col-sm-6">
            <InputText id="lastName" class="form-control" placeholder="@(() => bruger.Efternavn)"
                       @bind-Value="bruger.Efternavn" />
            <ValidationMessage For="@(() => bruger.Efternavn)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Telefonummer" class="col-sm-3 col-form-label">
            Telefonnummer
        </label>
        <div class="col-sm-6">
            <InputNumber id="email" class="form-control" placeholder="Telefonnummer"
                         @bind-Value="bruger.Telefonnummer" />
            <ValidationMessage For="@(() => bruger.Telefonnummer)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Addresse" class="col-sm-3 col-form-label">
            Addresse
        </label>
        <div class="col-sm-6">
            <InputText id="confirmEmail" class="form-control"
                       @bind-Value="bruger.Adresse" />
            <ValidationMessage For="@(() => bruger.Adresse)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Email" class="col-sm-3 col-form-label">
            Email
        </label>
        <div class="col-sm-6">
            <InputText id="confirmEmail" class="form-control"
                       @bind-Value="bruger.Email" />
            <ValidationMessage For="@(() => bruger.Email)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Fødselsdagsdato" class="col-sm-3 col-form-label">
            Fødselsdagsdato
        </label>
        <div class="col-sm-6">
            <InputDate @bind-Value="bruger.Fødselsdag" class="form-control" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Password" class="col-sm-3 col-form-label">
            Password
        </label>
        <div class="col-sm-6">
            <InputText @bind-Value="bruger.Password" class="form-control" />
        </div>
    </div>
    <div class="form-group row">
        <label for="isKoordinator" class="col-sm-3 col-form-label">Er koordinator:</label>
        <div class="col-sm-6">
            <label class="form-control locked">@bruger.IsKoordinator</label>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Gem</button>

</EditForm>
</div>
<div class="col">
    <div>
            <p>OBS: Afmeld knap endnu ikke implementeret</p> <!-- Slettes inden release -->
    <h3>Mine Vagter</h3>
    <hr />
            <div class="row">
                <div class="col">
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Navn</th>
                                <th>Point</th>
                                <th>Start</th>
                                <th>Slut</th>
                                <th>Beskrivelse</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var vagt in myvagtlist) 
                            {
                                <tr>
                                    <td>@vagt.ID</td>
                                    <td>@vagt.Navn</td>
                                    <td>@vagt.Point</td>
                                    <td>@vagt.Start</td>
                                    <td>@vagt.Slut</td>
                                    <td>@vagt.Beskrivelse</td>
                                    <td>
                                        @if(vagt.isLocked == true){ // This shit doesn't work yet. And I don't know why
                                            <button class="btn btn-secondary">Vagten er låst</button>
                                        }
                                        else if(vagt.isLocked == false)
                                        {
                                            <button class="btn btn-danger" @onclick="() => AfmeldVagt(vagt, UrlId)">Afmeld Vagt</button>
                                        }
                                    </td>
                                </tr>
                                Console.WriteLine(vagt.isLocked);
                            }
                        </tbody>
                    </table>
                </div>
            </div>
</div>
</div>
</div>
<br />
<div class="row">
<div class="col">
    <h3>Tilgængelige vagter</h3>

        <div>
            <input type="text" @bind="@searchKeyword" placeholder="Search by name" />
            <label>Sort Order:</label>
            <select @bind="@sortOrder">
                <option value="ascending">Point Ascending</option>
                <option value="descending">Point Descending</option>
            </select>
            <button @onclick="FilterAndSort">Submit</button>

        </div>

        <div class="row">
            <div class="col-md-8">
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Navn</th>
                            <th>Point</th>
                            <th>Start</th>
                            <th>Slut</th>
                            <th>Beskrivelse</th>
                            <th>Max Pladser</th>
                            <th>Pladser Tilbage: </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var vagt in filteredVagtlist)
                        {
                            <tr>
                                <td>@vagt.Navn</td>
                                <td>@vagt.Point</td>
                                <td>@vagt.Start</td>
                                <td>@vagt.Slut</td>
                                <td>@vagt.Beskrivelse</td>
                                <td>@vagt.Antal</td>
                                <td>@vagt.Pladser_Tilbage</td>
                                <td>
                                    
                                    <button class="btn btn-success" @onclick="() => TagVagt(vagt, UrlId)">Tag Vagt</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
</div>
</div>

@code {
    private Bruger bruger = new Bruger();
    private Bruger[]? brugerlist = new Bruger[0];


    private int UrlId = 0; // Deklarerer en variabel til at holde på ID'en fra URL'en


    private EditContext aEditContext;

    [Inject]
    private IBrugerService mService { get; set; }

    [Inject]
    private IVagtService vService { get; set; }

    protected override void OnInitialized()
    {
        aEditContext = new EditContext(bruger);
    }

    protected override async Task OnInitializedAsync()
    {
        GetUrlID();
        bruger = await mService.GetBruger(UrlId);
        vagtlist = (await vService.getAvailable(UrlId)).ToArray();
        myvagtlist = (await vService.getAllMine(UrlId)).ToArray();
    }

    public async Task HandleValidSubmit()
    {
        bruger.ID = UrlId;
        await UpdateBruger();

    }

    public async Task UpdateBruger()
    {
        await mService.UpdateBruger(bruger);
    }

    public async Task UpdateLists()
    {
        vagtlist = (await vService.getAll()).ToArray();
        myvagtlist = (await vService.getAllMine(UrlId)).ToArray();
    }

    public void GetUrlID()
    {
        var uri = new Uri(NavigationManager.Uri); // Opretter et Uri objekt med URL'en fra NavigationManager
        var queryParameters = System.Web.HttpUtility.ParseQueryString(uri.Query); // Bruger HttpUtility klassen til at parse query stringen i URL'en
        UrlId = Int32.Parse(queryParameters.Get("id")); // Henter ID'en fra URL'en og gemmer den i UrlId variablen
    }

    // Vagt-relateret kode

    private string searchKeyword = "";
    private string sortOrder = "ascending";

    private Vagt vagt = new Vagt(); // Opretter et tomt Booking objekt
    private Vagt[]? vagtlist = new Vagt[0]; // Opretter en tom liste af booking objekter
    private Vagt[]? myvagtlist = new Vagt[0]; // Opretter en tom liste af booking objekter

    private IEnumerable<Vagt> filteredVagtlist => string.IsNullOrWhiteSpace(searchKeyword) ? SortPoint(vagtlist) : SortPoint(vagtlist).Where(v => v.Navn.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase));


    private IEnumerable<Vagt> SortPoint(IEnumerable<Vagt> point)
    {
        return sortOrder == "ascending"
            ? point.OrderBy(p => p.Point)
            : point.OrderByDescending(p => p.Point);
    }

    private void ToggleSortOrder()
    {
        sortOrder = sortOrder == "ascending" ? "descending" : "ascending";
    }

    private void FilterAndSort()
    {
        // Opdatering af komponenten er automatisk, da den afhænger af filteredAndSortedPersons
    }

    private async Task TagVagt(Vagt vagt, int bruger)
    {
        vService.TagVagt(vagt, bruger);
        await Refresh();
    }

    private async Task AfmeldVagt(Vagt vagt, int bruger)
    {
        vService.AfmeldVagt(vagt, bruger);
        await Refresh();
    }

    public async Task Refresh()
    {
        await JSRuntime.InvokeVoidAsync("eval", "window.location.reload();"); // Genindlæs siden ved at kalde JavaScript-funktionen "window.location.reload();"
    }
}

